#+TITLE:     ClojureScript
#+AUTHOR:    Moritz Ulrich
#+EMAIL:     moritz@tarn-vedra.de
#+DATE:      26.08.2012
#+DESCRIPTION: More parentheses for the browser
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+BEAMER_FRAME_LEVEL: 2
#+BEAMER_HEADER_EXTRA: \usetheme{Boadilla}\usecolortheme{default}
#+PROPERTY: BEAMER_col_ALL 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 :ETC
#+BEAMER: \setbeamertemplate{navigation symbols}{}

#+STARTUP: indent beamer

* Abstract                                                         :noexport:
An introduction to ClojureScript - a modern LISP, compiling to Javascript.

* Description                                                      :noexport:
Clojure is a modern LISP running on the JVM. Persistent data
structures, powerful macros, simple multithreading semantics and the
read-eval-print-loop make programming easy and productive.

ClojureScripts opens the doors to a new versatile platform: The
browser.

This presentation gives an overview over the ClojureScript project:
IDEs, Tools, Libraries, and advantages and disadvantages in comparison
with pure Javascript.


* Outline                                                          :noexport:
- Minimale Einführung in Clojure(Script)
  - Persistent Data Structures
  - Makros
  - ???
- Wieso Javascript als Target?
  - Startup-Time
  - Code-Sharing zwischen Client & Server
  - Neue Targets (Browser, node.js)
- Beispiele
  - Javascript-Interop
  - DOM-Manipulation
    - Google Closure
    - jQuery
- Performance
  - Closure Compiler
  - Größe des generierten Codes
- Anwendungszwecke
  - Was bietet ClojureScript im Vergleich mit Javascript?
  - Verfügbare Libraries
- Tool-Support
  - Fehlende interaktive Entwicklungsumgebung
  - ClojureScript One
- In Arbeit
  - Source-Maps



* Introduction
** Hello World!
*** Clojure
#+BEGIN_SRC clojure
  (println "Hello World!")
#+END_SRC

*** ClojureScript
#+BEGIN_SRC clojure
  (.log js/console "Hello World!")
#+END_SRC

** Hello World v2
*** With =clojure.core/*print-fn*= bound to a function:
#+BEGIN_SRC clojure
  (println "Hello World!")
#+END_SRC
** Clojure?
*** Modern LISP
*** Targets the JVM
**** Great Java-Interop
*** Persistent Data Structures
*** Easy concurrent programming
**** Built-in STM
**** Reactive Actors ('Agents')
**** Good encapsulation of State
** ClojureScript?
*** All advantages of Clojure
- Functional Programming
- Persistent Data Structures
- Powerful concise Syntax
- Great Host Interop
*** Runs in the Browser
- Wide target range
*** No =eval=
- Reader still available!

** ClojureScript!
*** Created by Rich Hickey in 2011
*** Clojure Compiler which targets Javascript
*** Same Runtime as Clojure
- Data Structures
- clojure.core
- Code Sharing possible
*** Cleaner Codebase
- 100% Clojure, no Java/Javascript
- Much of Clojure is implemented in Java

** Proof?
*** =find . -name *.js=                                           :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:
#+BEGIN_SRC sh
  ./samples/hello-js/externed-lib.js
  ./samples/hello-js/externs.js
  ./samples/hello-js/my-external-lib.js
  ./src/cljs/cljs/nodejs_externs.js
#+END_SRC
*** =cat ./src/cljs/cljs/nodejs_externs.js=                       :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:
#+BEGIN_SRC javascript
  function require(){}
  function process(){}
#+END_SRC

** Why target Javascript?
*** Faster startup time
*** Widespread platform (Browsers)
*** Node.js
*** Advantages when using same code Server- and Client-Side
* Code Samples
** Platform Interop
*** Function calls
#+BEGIN_SRC clojure
  (.log js/console "Foobar")
#+END_SRC

#+BEGIN_SRC clojure
  (js/alert 42)
#+END_SRC

*** Properties
#+BEGIN_SRC clojure
  (.-location js/window)
#+END_SRC

#+BEGIN_SRC clojure
  (set! (.-prop obj) "Foo")
#+END_SRC
** Interop: Syntactic Sugar
*** Double Dot
#+BEGIN_SRC clojure
  (.. ($ "#my-table")
      (children "tr")
      (children "td")
      (hide))
#+END_SRC
*** Anonymous Functions
#+BEGIN_SRC clojure
  (fn [a b] (+ a b))
#+END_SRC
#+BEGIN_SRC clojure
  #(+ %1 %2)
#+END_SRC
** DOM Manipulation
- Google Closure
- jQuery

** Google Closure \\ Javascript Library by Google
*** Advantages                                                      :BMCOL:
:PROPERTIES:
:BEAMER_col: .45
:BEAMER_envargs: C[t]
:END:
- Used by ClojureScript itself
- Very rich library containing many kinds of UI elements
- Integrates nicely with the Google Closure compiler

*** Disadvantages                                                   :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.45
:BEAMER_envargs: C[t]
:END:
- Hard to use
- Usually hard to integrate in legacy codebases
- As of May 2012: No way to set data-attributes

** jQuery
*** Advantages                                                      :BMCOL:
:PROPERTIES:
:BEAMER_col: .45
:BEAMER_envargs: C[t]
:END:
- More concise to use
- Widely known
- Nice wrappers available (jayq)

*** Disadvantages                                                   :BMCOL:
:PROPERTIES:
:BEAMER_col: .45
:BEAMER_envargs: C[t]
:END:
- Syntax doesn't integrate very good
- Uses own Array type which doesn't work out-of-the-box with Clojure's
  Sequence abstractions

* Implementation
** Compilation
1) Reader
2) Macros
3) Analysis
4) Emission
5) Closure Compiler
** Closure Compiler
*** Optimizing compiler for Javascript
*** Performs the following:
**** Warnings
**** Dead-code elimination
**** Optimization
*** Code must be written in a very strict style
**** ClojureScript generates such code
** Size of generated Code
*** Code                                                          :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:
#+BEGIN_SRC clojure
  (ns foo.bar)

  (defn ^:export greet [name]
    (js/alert (str "Hello, " name "!")))
#+END_SRC

*** Result                                                        :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:
#+BEGIN_EXAMPLE
  91914  out-advanced.js
  724380 out-pretty.js
#+END_EXAMPLE

** Limitations
*** No Multithreading
**** Atoms and Refs are still useful
*** Complicated use of macros
*** Many Clojure libraries don't work without modifications

* Tool Support
** Available Libraries
*** User-Interface
**** Google Closure
**** jQuery UI
*** DOM Manipulation/Generation
**** jayq (jQuery)
**** crate/hiccups (Hiccup)
**** enfocus (Enlive)
*** All other Javascript libraries
** IDEs
*** Editor Support
**** clojurescript-mode (Emacs)
*** Build Tools
**** lein-cljsbuild (Leiningen)
**** cljs-watch
*** REPL
**** =lein cljsbuild repl-{listen,rhino}=
** ClojureScript One
*** Sample single-page application
*** Browser connected REPL
*** Well documented
*** Great (but complex) starting point

* Future Plans
** Future Plans
*** Pluggable Backends
*** Source Maps
*** Reactive Programming
** Recent: Pluggable Backends \\ Summer of Code Project by Raphael Amiard
*** Lexer extracted from monolithic Compiler
*** Compiler implemented as modular Backend
*** Soon:
**** Lua
**** Python
**** C
**** Malbolge?

** Source Maps
*** Map from compiled Javascript to ClojureScript
*** Great for debugging errors
*** Implemented in Chrome, support in ClojureScript coming

** Reactive Programming
*** Most stuff happens in the DOM
*** Manual DOM Manipulation is cumbersome
*** Solution: Bind values of elements/data-structures to modified values of other data structures

* Conclusion
** Conclusions
** Good for
*** Single Page applications with much logic
*** Re-use of code written for the server

** Not so good for
*** Small utility scripts (high file size)
*** High performance code

** Starting Points
*** Clojure Google Group
[[http://groups.google.com/group/clojure]]
*** ClojureScript on Github
[[https://github.com/clojure/clojurescript]]

(Don't follow the 'Quick Start' Guide! Use lein-cljsbuild for building
projects or starting a REPL.)
*** lein-cljsbuild
[[https://github.com/emezeske/lein-cljsbuild]]
*** ClojureScript One
[[http://clojurescriptone.com/]]

** Links
| Google Closure | https://developers.google.com/closure/ |
| jQuery         | [[http://jquery.com/]]                     |
| jayq           | [[https://github.com/ibdknox/jayq]]        |
| crate          | [[https://github.com/ibdknox/crate]]       |
| hiccups        | [[https://github.com/teropa/hiccups]]      |
| enfocus        | [[https://github.com/ckirkendall/enfocus]] |
| cljs-watch     | [[https://github.com/ibdknox/cljs-watch]]  |


** So long... \\ ...and thanks for all the fish
Thank you!

** Contact

| Moritz Ulrich                 |
|-------------------------------|
| =moritz@tarn-vedra.de=        |
| [[https://github.com/the-kenny/]] |
| [[http://twitter.com/the_kenny]] |
